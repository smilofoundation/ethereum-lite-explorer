{"version":3,"sources":["webpack://__aleth_io__ethLite/../node_modules/@alethio/explorer-ui/src/box/block/BlockHashBox.tsx","webpack://__aleth_io__ethLite/../node_modules/@alethio/explorer-ui/src/box/block/ParentHashBox.tsx","webpack://__aleth_io__ethLite/../node_modules/@alethio/ui/src/data/ByteSize.tsx","webpack://__aleth_io__ethLite/../node_modules/@alethio/explorer-ui/src/box/block/BlockSizeBox.tsx","webpack://__aleth_io__ethLite/../node_modules/@alethio/explorer-ui/src/box/block/UnclesCountBox.tsx","webpack://__aleth_io__ethLite/./app/eth-lite/module/block/blockDetails/BlockDetails.tsx"],"names":["BlockHashBox_BlockHashBox","external_react_","[object Object]","children","linkTo","this","props","HashLinkValueBox","colors","theme","background","blockColorCode","text","blockBoxText","ParentHashBox","parentHashBoxBg","parentHashBoxText","ByteSize_ByteSize","format","replace","NumberFormatter","locale","BlockSizeBox","bytes","translations","ValueBox","UnclesCountBox_UnclesCountBox","unclesBoxBg","unclesBoxText","border","unclesBoxBorder","variant","data_Number","value","__webpack_require__","d","__webpack_exports__","BlockDetails_BlockDetails","translation","tr","blockDetails","block","slots","extraDataSection","BlockDetailsSlotType","ExtraData","extraData","vanity","fullnodes","seal","commitedSeals","LayoutRow","LayoutRowItem","fullRow","autoHeight","Label","HashValueBox","map","uncleHash","idx","UncleHashBox","key","get","DecodedHexData","data","LayoutSection","useWrapper","minWidth","BlockNumberBox","noLink","id","creationTime","TimeElapsedBox","timestamp","Confirmations","uncles","length","hash","parentHash","parentId","nonce","byteSize","Txs","sha3uncles","AddressHashBox","beneficiaryAddress","NumberBox","gasLimit","GasUsedValueBox","gasUsed","limit","DifficultyBox","difficulty","mixHash","HexData","logsBloom"],"mappings":"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","file":"504a09492d34e8a9a622.bundle.js","sourcesContent":["import * as React from \"react\";\nimport { HashLinkValueBox } from \"../HashLinkValueBox\";\nimport { ITheme } from \"../../theme/ITheme\";\n\ninterface IBlockHashBoxProps {\n    children: string;\n    linkTo?: string;\n}\n\nexport class BlockHashBox extends React.Component<IBlockHashBoxProps> {\n    render() {\n        let { children, linkTo } = this.props;\n        return (\n            <HashLinkValueBox\n                colors={(theme: ITheme) => ({\n                    background: theme.colors.blockColorCode,\n                    text: theme.colors.blockBoxText\n                })}\n                linkTo={linkTo}\n            >\n                { children }\n            </HashLinkValueBox>\n        );\n    }\n}\n","import * as React from \"react\";\nimport { HashLinkValueBox, IHashLinkValueBoxProps } from \"../HashLinkValueBox\";\nimport { ITheme } from \"../../theme/ITheme\";\n\ninterface IParentHashBoxProps {\n    linkTo?: IHashLinkValueBoxProps[\"linkTo\"];\n    children: string;\n}\n\nexport const ParentHashBox: React.StatelessComponent<IParentHashBoxProps> = ({ children, linkTo }) => (\n    <HashLinkValueBox\n        colors={(theme: ITheme) => ({\n            background: theme.colors.parentHashBoxBg,\n            text: theme.colors.parentHashBoxText\n        })}\n        linkTo={linkTo}\n    >\n        { children }\n    </HashLinkValueBox>\n);\n","import * as React from \"react\";\nimport { NumberFormatter } from \"../util/internal/locale/NumberFormatter\";\n\nexport interface IByteSizeProps {\n    children: number;\n    locale: string;\n    /** Localized string: (e.g. \"%d bytes\") */\n    format: string;\n}\n\n/** Formats numbers that represent data sizes (in bytes) */\nexport class ByteSize extends React.Component<IByteSizeProps> {\n    render() {\n        return (\n            this.props.format.replace(/%d/, new NumberFormatter().format(this.props.children, this.props.locale))\n        );\n    }\n}\n","import * as React from \"react\";\nimport { ValueBox } from \"@alethio/ui/lib/layout/content/box/ValueBox\";\nimport { ByteSize } from \"@alethio/ui/lib/data/ByteSize\";\n\nexport interface IBlockSizeBoxProps {\n    bytes: number;\n    locale: string;\n    translations: {\n        bytes: string;\n    };\n}\n\nexport const BlockSizeBox: React.StatelessComponent<IBlockSizeBoxProps> = ({ bytes, locale, translations }) => (\n    <ValueBox><ByteSize format={\"%d \" + translations.bytes} locale={locale}>{bytes}</ByteSize></ValueBox>\n);\n","import * as React from \"react\";\nimport { ValueBox, IValueBoxProps } from \"@alethio/ui/lib/layout/content/box/ValueBox\";\nimport { Number } from \"@alethio/ui/lib/data/Number\";\nimport { ITheme } from \"../../theme/ITheme\";\n\nexport interface IUnclesCountBoxProps {\n    children: number;\n    locale: string;\n    variant?: IValueBoxProps[\"variant\"];\n}\n\nexport class UnclesCountBox extends React.Component<IUnclesCountBoxProps> {\n    render() {\n        return (\n            <ValueBox\n                colors={(theme: ITheme) => ({\n                    background: theme.colors.unclesBoxBg,\n                    text: theme.colors.unclesBoxText,\n                    border: theme.colors.unclesBoxBorder\n                })}\n                variant={this.props.variant}\n            >\n                <Number locale={this.props.locale} value={this.props.children} />\n            </ValueBox>\n        );\n    }\n}\n","import * as React from \"react\";\nimport {LayoutRow} from \"@alethio/ui/lib/layout/content/LayoutRow\";\nimport {LayoutRowItem} from \"@alethio/ui/lib/layout/content/LayoutRowItem\";\nimport {Label} from \"@alethio/ui/lib/data/Label\";\nimport {NumberBox} from \"@alethio/ui/lib/data/box/NumberBox\";\nimport {GasUsedValueBox} from \"@alethio/ui/lib/data/box/GasUsedValueBox\";\nimport {DifficultyBox} from \"@alethio/ui/lib/data/box/DifficultyBox\";\nimport {DecodedHexData} from \"@alethio/ui/lib/data/hex/DecodedHexData\";\nimport {HexData} from \"@alethio/ui/lib/data/hex/HexData\";\nimport {HashValueBox} from \"@alethio/ui/lib/data/box/HashValueBox\";\nimport {LayoutSection} from \"@alethio/ui/lib/layout/content/LayoutSection\";\nimport {BlockNumberBox} from \"@alethio/explorer-ui/lib/box/block/BlockNumberBox\";\nimport {TimeElapsedBox} from \"app/shared/component/TimeElapsedBox\";\nimport {BlockHashBox} from \"@alethio/explorer-ui/lib/box/block/BlockHashBox\";\nimport {ParentHashBox} from \"@alethio/explorer-ui/lib/box/block/ParentHashBox\";\nimport {BlockSizeBox} from \"@alethio/explorer-ui/lib/box/block/BlockSizeBox\";\nimport {AddressHashBox} from \"@alethio/explorer-ui/lib/box/account/AddressHashBox\";\nimport {UncleHashBox} from \"@alethio/explorer-ui/lib/box/uncle/UncleHashBox\";\nimport {UnclesCountBox} from \"@alethio/explorer-ui/lib/box/block/UnclesCountBox\";\nimport {ITranslation} from \"plugin-api/ITranslation\";\nimport {IBlockDetails} from \"app/eth-lite/data/block/details/IBlockDetails\";\nimport {BlockDetailsSlotType} from \"./BlockDetailsSlotType\";\n\nexport interface IBlockDetailsProps {\n    blockDetails: IBlockDetails;\n    translation: ITranslation;\n    locale: string;\n    slots: Record<BlockDetailsSlotType, JSX.Element[]>;\n}\n\nexport class BlockDetails extends React.PureComponent<IBlockDetailsProps> {\n    render() {\n        let {translation: tr, blockDetails: block, slots, locale} = this.props;\n\n        let extraDataSection = (<div/>);\n        if (slots && slots[BlockDetailsSlotType.ExtraData] &&\n            block.extraData.vanity && block.extraData.fullnodes && block.extraData.seal &&\n            block.extraData.commitedSeals) {\n            extraDataSection = (\n                <>\n                    <LayoutRow>\n                        <LayoutRowItem fullRow autoHeight>\n                            <Label>Vanity</Label>\n                            <HashValueBox>{block.extraData.vanity}</HashValueBox>\n                        </LayoutRowItem>\n                    </LayoutRow>\n                    <LayoutRow>\n                        <LayoutRowItem fullRow autoHeight>\n                            <Label>VALIDATORS</Label>\n                            {block.extraData.fullnodes.map((uncleHash: any, idx: any) => (\n                                <UncleHashBox key={uncleHash}>\n                                    {uncleHash}\n                                </UncleHashBox>\n                            ))}\n                        </LayoutRowItem>\n                    </LayoutRow>\n                    <LayoutRow>\n                        <LayoutRowItem fullRow autoHeight>\n                            <Label>Seal</Label>\n                            <HashValueBox>{block.extraData.seal}</HashValueBox>\n                        </LayoutRowItem>\n                    </LayoutRow>\n                    <LayoutRow>\n                        <LayoutRowItem fullRow autoHeight>\n                            <Label>Commited Seals</Label>\n                            {block.extraData.commitedSeals.map((uncleHash: any, idx: any) => (\n                                <UncleHashBox key={uncleHash}>\n                                    {uncleHash}\n                                </UncleHashBox>\n                            ))}\n                        </LayoutRowItem>\n                    </LayoutRow>\n                </>\n            );\n        } else if (slots && slots[BlockDetailsSlotType.ExtraData]) {\n            extraDataSection = (\n                <LayoutRow>\n                    <LayoutRowItem autoHeight>\n                        <Label>{tr.get(\"blockView.content.extraData.label\")}</Label>\n                        <DecodedHexData data={block.extraData}/>\n                    </LayoutRowItem>\n                </LayoutRow>\n            );\n        }\n\n        return <>\n            <LayoutSection useWrapper>\n                <LayoutRow minWidth={900}>\n                    <LayoutRowItem>\n                        <Label>{tr.get(\"blockView.content.blockNumber.label\")}</Label>\n                        <BlockNumberBox noLink>{block.id}</BlockNumberBox>\n                    </LayoutRowItem>\n                    <LayoutRowItem>\n                        { block.creationTime ?\n                        <>\n                        <Label>{tr.get(\"blockView.content.blockCreationTime.label\")}</Label>\n                        <TimeElapsedBox timestamp={block.creationTime}\n                            translation={tr}\n                            locale={locale} />\n                        </>\n                        : null }\n                        { slots[BlockDetailsSlotType.Confirmations] }\n                    </LayoutRowItem>\n                    <LayoutRowItem>\n                        <Label>{tr.get(\"blockView.content.uncles.label\")}</Label>\n                        <UnclesCountBox locale={locale}>{block.uncles.length}</UnclesCountBox>\n                    </LayoutRowItem>\n                </LayoutRow>\n                <LayoutRow minWidth={760}>\n                    <LayoutRowItem>\n                        <Label>{tr.get(\"general.hash\")}</Label>\n                        <BlockHashBox>{block.hash}</BlockHashBox>\n                    </LayoutRowItem>\n                    {block.parentHash ?\n                    <LayoutRowItem>\n                        <Label>{tr.get(\"blockView.content.parentHash.label\")}</Label>\n                        <ParentHashBox\n                            linkTo={block.parentId !== void 0 ?\n                                `page://aleth.io/block?blockNumber=${block.parentId}` :\n                                void 0}\n                        >\n                            {block.parentHash}\n                        </ParentHashBox>\n                    </LayoutRowItem> : null }\n                </LayoutRow>\n                { block.uncles.length ?\n                <LayoutRow>\n                    <LayoutRowItem fullRow>\n                        <Label>{tr.get(\"blockView.content.uncles.label\")}</Label>\n                        {block.uncles.map((uncleHash, idx) => (\n                            <UncleHashBox key={uncleHash}\n                                linkTo={`page://aleth.io/uncle?blockNumber=${block.id}&uncleIndex=${idx}`}\n                            >\n                                {uncleHash}\n                            </UncleHashBox>\n                        ))}\n                    </LayoutRowItem>\n                </LayoutRow>\n                : null }\n                { block.nonce ?\n                <LayoutRow minWidth={710}>\n                    <LayoutRowItem>\n                        <Label>{tr.get(\"general.nonce\")}</Label>\n                        <HashValueBox>{block.nonce}</HashValueBox>\n                    </LayoutRowItem>\n                    <LayoutRowItem>\n                        <Label>{tr.get(\"blockView.content.blockSize.label\")}</Label>\n                        <BlockSizeBox bytes={block.byteSize} locale={locale} translations={{\n                            bytes: tr.get(\"general.bytes\")\n                        }} />\n                    </LayoutRowItem>\n                </LayoutRow>\n                : null }\n            </LayoutSection>\n            { slots[BlockDetailsSlotType.Txs]}\n            <LayoutSection useWrapper>\n                <LayoutRow minWidth={760}>\n                    { block.sha3uncles ?\n                    <LayoutRowItem>\n                        <Label>{tr.get(\"blockView.content.sha3Uncles.label\")}</Label>\n                        <HashValueBox>{block.sha3uncles}</HashValueBox>\n                    </LayoutRowItem>\n                    : null }\n                </LayoutRow>\n                <LayoutRow>\n                    <LayoutRowItem fullRow>\n                        <Label>{tr.get(\"blockView.content.beneficiary.label\")}</Label>\n                        <AddressHashBox>{block.beneficiaryAddress}</AddressHashBox>\n                    </LayoutRowItem>\n                </LayoutRow>\n                <LayoutRow minWidth={760}>\n                    <LayoutRowItem>\n                        <Label>{tr.get(\"general.gasLimit\")}</Label>\n                        <NumberBox value={block.gasLimit} locale={locale} />\n                    </LayoutRowItem>\n                    <LayoutRowItem>\n                        <Label>{tr.get(\"general.gasUsed\")}</Label>\n                        <GasUsedValueBox value={block.gasUsed} limit={block.gasLimit} locale={locale} />\n                    </LayoutRowItem>\n                </LayoutRow>\n                <LayoutRow>\n                    <LayoutRowItem>\n                        <Label>{tr.get(\"blockView.content.difficulty.label\")}</Label>\n                        <DifficultyBox value={block.difficulty} locale={locale} />\n                    </LayoutRowItem>\n                </LayoutRow>\n                {  extraDataSection }\n                { block.mixHash ?\n                <LayoutRow minWidth={760}>\n                    <LayoutRowItem>\n                        <Label>{tr.get(\"blockView.content.mixHash.label\")}</Label>\n                        <HashValueBox>{block.mixHash}</HashValueBox>\n                    </LayoutRowItem>\n                </LayoutRow>\n                : null }\n            </LayoutSection>\n            <LayoutSection useWrapper>\n                <LayoutRow>\n                    <LayoutRowItem fullRow autoHeight>\n                        <Label>{tr.get(\"blockView.content.logsBloom.label\")}</Label>\n                        <HexData data={block.logsBloom}/>\n                    </LayoutRowItem>\n                </LayoutRow>\n            </LayoutSection>\n        </>;\n    }\n}\n"],"sourceRoot":""}